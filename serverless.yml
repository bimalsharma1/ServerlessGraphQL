# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverlessgraphql
description: Graph QL Services
# app and org for use with dashboard.serverless.com
#app: your-app-name
org: Apricot Software Pty Limited

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - api-gateway-stage-tag-plugin
#  - serverless-domain-manager
  - serverless-pseudo-parameters
  - serverless-tag-cloud-watch-logs
  - serverless-dynamodb-pitr

custom:
  apiStageTags: ${self:custom.tags}

#  authorizer:
#    name: Cognito
#    arn: arn:aws:cognito-idp:#{AWS::Region}:#{AWS::AccountId}:userpool/${cf:graphql-${self:provider.stage}-aws-setup.UserPoolId}

  cloudWatchLogsTags: ${self:custom.tags}

  cors:
    origin: https://${file(config.json):domain}
    headers:
    - Content-Type
    - Authorization
    - Access-Control-Allow-Origin
    allowCredentials: true

  #customDomain:
  #  domainName: api.${file(config.json):domain}
  #  stage: ${self:provider.stage}
  #  basePath: venues
  #  createRoute53Record: true
  #  endpointType: regional

  tags:
    Billing: ${file(config.json):billing}
    CostCentre: ${file(config.json):costcentre}
    project: alveo
    team: maxgaming

provider:
  name: aws
  runtime: dotnetcore3.1
  stage: dev
  region: ap-southeast-2

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  individually: true

functions:
  hello:
    handler: GraphQLData::GraphQLDynamo.Handler::GetData

    # you can add packaging information here
    package:
      artifact: bin/Release/GraphQL.zip
    #  exclude:
    #    - exclude-me.js
    #    - exclude-me-dir/**
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: users
          method: get
          cors: ${self:custom.cors}
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
